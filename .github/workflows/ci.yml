      
# Название нашего workflow - будет отображаться в GitHub Actions
name: Basic CI Checks

#Триггеры
on:
  push: # При каждом push (отправке кода)
    branches: [ main ]
  pull_request: # При каждом pull request (запросе на слияние)
    branches: [ main ]

#Задачи, которые будут выполняться
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Шаг 1: Забрать (скачать) код из репозитория
      - name: Checkout code
        uses: actions/checkout@v4 # Используем готовое действие (action) от GitHub

      # --- Сборка Фронтенда ---
      - name: Setup Node.js # Название шага
        uses: actions/setup-node@v4 # Используем готовое действие для настройки Node.js
        with:
          node-version: '20' # Укажите версию Node.js, которую вы используете (например, 18, 20)

      - name: Install Frontend Dependencies #Установка зависимостей фронтенда
        working-directory: ./Front/front
        run: npm install

      - name: Build Frontend #Сборка фронтенда
        working-directory: ./Front/front
        run: npm run build

      # --- Проверки для Бэкенда ---
      - name: Setup Python #Настройка Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Backend Dependencies #Установка зависимостей API
        working-directory: ./api_server
        run: | 
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build API Docker Image
        working-directory: ./api_server # Где лежит Dockerfile для API
        run: docker build -t myusername/my-api-image:latest .

      - name: Build Bot Docker Image
        working-directory: ./Bot # Где лежит Dockerfile для Бота
        run: docker build -t myusername/my-bot-image:latest .

      # --- Вход в GitHub Container Registry ---
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Имя пользователя, инициировавшего workflow
          password: ${{ secrets.GITHUB_TOKEN }} # Стандартный токен, предоставляемый GitHub Actions

      # --- Сборка и Push Docker-образа API ---
      - name: Extract metadata (tags, labels) for API Docker image
        id: meta_api
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/my-api-image
          tags: |
            type=sha,prefix=,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push API Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./api_server # Путь к Dockerfile и контексту сборки для API
          push: ${{ github.event_name != 'pull_request' }} # Пушим только если это не pull request (т.е. push в main)
          tags: ${{ steps.meta_api.outputs.tags }}
          labels: ${{ steps.meta_api.outputs.labels }}

      # --- Сборка и Push Docker-образа Бота ---
      - name: Extract metadata (tags, labels) for Bot Docker image
        id: meta_bot
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/my-bot-image # Имя образа (замените my-bot-image)
          tags: |
            type=sha,prefix=,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Bot Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./Bot # Путь к Dockerfile и контексту сборки для Бота
          push: ${{ github.event_name != 'pull_request' }} # Пушим только если это не pull request
          tags: ${{ steps.meta_bot.outputs.tags }}
          labels: ${{ steps.meta_bot.outputs.labels }}
    
